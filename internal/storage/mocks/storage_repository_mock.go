// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AxMdv/go-url-shortener/internal/storage (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=github.com/AxMdv/go-url-shortener/internal/storage/mocks/storage_repository_mock.go -package=mocks github.com/AxMdv/go-url-shortener/internal/storage Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/AxMdv/go-url-shortener/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddURL mocks base method.
func (m *MockRepository) AddURL(arg0 context.Context, arg1 *storage.FormedURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddURL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddURL indicates an expected call of AddURL.
func (mr *MockRepositoryMockRecorder) AddURL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddURL", reflect.TypeOf((*MockRepository)(nil).AddURL), arg0, arg1)
}

// AddURLBatch mocks base method.
func (m *MockRepository) AddURLBatch(arg0 context.Context, arg1 []storage.FormedURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddURLBatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddURLBatch indicates an expected call of AddURLBatch.
func (mr *MockRepositoryMockRecorder) AddURLBatch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddURLBatch", reflect.TypeOf((*MockRepository)(nil).AddURLBatch), arg0, arg1)
}

// DeleteURLBatch mocks base method.
func (m *MockRepository) DeleteURLBatch(arg0 context.Context, arg1 []storage.FormedURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURLBatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURLBatch indicates an expected call of DeleteURLBatch.
func (mr *MockRepositoryMockRecorder) DeleteURLBatch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURLBatch", reflect.TypeOf((*MockRepository)(nil).DeleteURLBatch), arg0, arg1)
}

// GetFlagByShortURL mocks base method.
func (m *MockRepository) GetFlagByShortURL(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlagByShortURL", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlagByShortURL indicates an expected call of GetFlagByShortURL.
func (mr *MockRepositoryMockRecorder) GetFlagByShortURL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlagByShortURL", reflect.TypeOf((*MockRepository)(nil).GetFlagByShortURL), arg0, arg1)
}

// GetURL mocks base method.
func (m *MockRepository) GetURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockRepositoryMockRecorder) GetURL(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockRepository)(nil).GetURL), arg0, arg1)
}

// GetURLByUserID mocks base method.
func (m *MockRepository) GetURLByUserID(arg0 context.Context, arg1 string) ([]storage.FormedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLByUserID", arg0, arg1)
	ret0, _ := ret[0].([]storage.FormedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLByUserID indicates an expected call of GetURLByUserID.
func (mr *MockRepositoryMockRecorder) GetURLByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLByUserID", reflect.TypeOf((*MockRepository)(nil).GetURLByUserID), arg0, arg1)
}
