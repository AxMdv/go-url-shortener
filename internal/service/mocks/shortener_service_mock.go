// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AxMdv/go-url-shortener/internal/service (interfaces: ShortenerService)
//
// Generated by this command:
//
//	mockgen -destination github.com/AxMdv/go-url-shortener/internal/service/mocks/shortener_service_mock.go -package mocks github.com/AxMdv/go-url-shortener/internal/service ShortenerService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	storage "github.com/AxMdv/go-url-shortener/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockShortenerService is a mock of ShortenerService interface.
type MockShortenerService struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerServiceMockRecorder
}

// MockShortenerServiceMockRecorder is the mock recorder for MockShortenerService.
type MockShortenerServiceMockRecorder struct {
	mock *MockShortenerService
}

// NewMockShortenerService creates a new mock instance.
func NewMockShortenerService(ctrl *gomock.Controller) *MockShortenerService {
	mock := &MockShortenerService{ctrl: ctrl}
	mock.recorder = &MockShortenerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenerService) EXPECT() *MockShortenerServiceMockRecorder {
	return m.recorder
}

// CreateShortURL mocks base method.
func (m *MockShortenerService) CreateShortURL(arg0 *storage.FormedURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortURL", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShortURL indicates an expected call of CreateShortURL.
func (mr *MockShortenerServiceMockRecorder) CreateShortURL(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortURL", reflect.TypeOf((*MockShortenerService)(nil).CreateShortURL), arg0)
}

// CreateShortURLBatch mocks base method.
func (m *MockShortenerService) CreateShortURLBatch(arg0 []storage.FormedURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortURLBatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShortURLBatch indicates an expected call of CreateShortURLBatch.
func (mr *MockShortenerServiceMockRecorder) CreateShortURLBatch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortURLBatch", reflect.TypeOf((*MockShortenerService)(nil).CreateShortURLBatch), arg0)
}

// DeleteURLBatch mocks base method.
func (m *MockShortenerService) DeleteURLBatch(arg0 storage.DeleteBatch) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteURLBatch", arg0)
}

// DeleteURLBatch indicates an expected call of DeleteURLBatch.
func (mr *MockShortenerServiceMockRecorder) DeleteURLBatch(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURLBatch", reflect.TypeOf((*MockShortenerService)(nil).DeleteURLBatch), arg0)
}

// GetAllURLByID mocks base method.
func (m *MockShortenerService) GetAllURLByID(arg0 string) ([]storage.FormedURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllURLByID", arg0)
	ret0, _ := ret[0].([]storage.FormedURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllURLByID indicates an expected call of GetAllURLByID.
func (mr *MockShortenerServiceMockRecorder) GetAllURLByID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllURLByID", reflect.TypeOf((*MockShortenerService)(nil).GetAllURLByID), arg0)
}

// GetFlagByShortURL mocks base method.
func (m *MockShortenerService) GetFlagByShortURL(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlagByShortURL", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlagByShortURL indicates an expected call of GetFlagByShortURL.
func (mr *MockShortenerServiceMockRecorder) GetFlagByShortURL(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlagByShortURL", reflect.TypeOf((*MockShortenerService)(nil).GetFlagByShortURL), arg0)
}

// GetLongURL mocks base method.
func (m *MockShortenerService) GetLongURL(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLongURL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLongURL indicates an expected call of GetLongURL.
func (mr *MockShortenerServiceMockRecorder) GetLongURL(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLongURL", reflect.TypeOf((*MockShortenerService)(nil).GetLongURL), arg0)
}

// PingDatabase mocks base method.
func (m *MockShortenerService) PingDatabase() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingDatabase")
	ret0, _ := ret[0].(error)
	return ret0
}

// PingDatabase indicates an expected call of PingDatabase.
func (mr *MockShortenerServiceMockRecorder) PingDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingDatabase", reflect.TypeOf((*MockShortenerService)(nil).PingDatabase))
}

// ShortenLongURL mocks base method.
func (m *MockShortenerService) ShortenLongURL(arg0 []byte) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenLongURL", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ShortenLongURL indicates an expected call of ShortenLongURL.
func (mr *MockShortenerServiceMockRecorder) ShortenLongURL(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenLongURL", reflect.TypeOf((*MockShortenerService)(nil).ShortenLongURL), arg0)
}
